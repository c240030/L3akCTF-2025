# The given values from the challenge
x = 54203
a = 139534605978199350449870348663594126359773246906906418074945064315708552206952695156472923968554408862426942537522569163756593332601739006413404986641247624386522169136633429464195370373009454673819688653512479919153332504769835621608305089536245284458011218876474599059184828911301976396971466368457267831713
n = 12909957208634846878337953184362917609451224905637563117148705894888627434882610771803126452504238664471840340722310690445704139825753660053450331966698205860077330083433391290469454571152366284661640391190008258576947840075212180965738595761925516686689797153224716140447515370184846067654512660266993573880775530634588475842083212670090415716860925772115834314563453955681012820960922892736520042799257599331942717963921797157341454739255402633419216921702659541513141028779948257696746810146033667942181244847983610429227387863821351416689099862418820999250005071861968501333899759899513283613946626413863922604073
k = 24474689179117620559916890529357882261493825442019850679598519081287156822984032786458479363048845076078220151760752906879055457682971398809768604333650029141164831566127754715775782823279839766009120238777348170982471623193652714921064243946655726118484337862412275391615166714375745390409664610412156281691721978732319253694004232933156865189917761521085635692596755802274763409871937618659197646864593743015558828475450200247766980008744319676783526158213931581034209356092026748307730083927225249093712227456855972520574747646873074625455900058136458828591335711677741591552501530047335481073272381631524755666119
c = 11185314040721202177044508537272244264288033276739579716599246665772965854249656943282002695659011960313245796587834222078633141747802754149848079632693280265262199729548775879612614113828267471629389698999657686858047585254549801752634049341009476489652456620836030696102393122618822021082792763848220677651608135328630551380537642144416978955966827336280510774254681264136102268730343853559751471313539810499170669215479225898738527316798768622089152851154959800113070358637984124299357803777453137311143202502153552192970732744885328421213081964363890280109214401691255867427694709196120824176729643585687319321473
e = 65537

# Perform the attack to find p and q
inv_x_mod_a = pow(x, -1, a)
y0 = (k * inv_x_mod_a) % a
t = y0 // a
y = y0 - t * a
p = (k - x * y) // a
q = n // p

# Decrypt the message
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
decrypted_message_int = pow(c, d, n)

# Convert to bytes
byte_length = (decrypted_message_int.bit_length() + 7) // 8
flag_bytes = decrypted_message_int.to_bytes(byte_length, 'big')

# Try to decode safely and print the result
try:
    flag = flag_bytes.decode('utf-8')
    print(f"Decrypted flag: {flag}")
except UnicodeDecodeError as e:
    print(f"UnicodeDecodeError: {e}")
    print("The decrypted data is not valid UTF-8. Here are the raw bytes:")
    print(flag_bytes)

# Let's try to find the flag within the bytestring
# It's possible there are leading null bytes or other padding
if b'L3AK{' in flag_bytes:
    start_index = flag_bytes.find(b'L3AK{')
    # Assume the flag ends with '}'
    try:
        end_index = flag_bytes.find(b'}', start_index)
        if end_index != -1:
            extracted_flag = flag_bytes[start_index:end_index+1]
            print(f"Extracted Flag: {extracted_flag.decode('utf-8')}")
    except Exception as e:
        print(f"Could not extract flag: {e}")